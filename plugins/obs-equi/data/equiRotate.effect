// Based on libretro shader https://github.com/libretro/common-shaders/blob/master/test/lab/misc/sharpness.cg
// Converted to obs effect file by Nibbles
// Edited by bela333



uniform float4x4 ViewProj;
uniform texture2d image;

uniform texture2d target;
uniform float4 color = {1.0, 1.0, 1.0, 1.0};

uniform float x;
uniform float y;
uniform float z;
uniform float texture_width;
uniform float texture_height;

#define PI 3.14159265f

sampler_state def_sampler {
	Filter   = Linear;
	AddressU = Wrap;
	AddressV = Wrap;
};

struct VertInOut {
	float4 pos : POSITION;
	float2 uv  : TEXCOORD0;
};

struct VertOut {
	float4 pos : POSITION;
	float4 col : COLOR;
	float2 uv  : TEXCOORD0;
};

// IDENTITY MATRIX
/*
	float3x3 rotOut = float3x3(
   		1.0, 0.0, 0.0, // first row (not column as in GLSL!)
   		0.0, 1.0, 0.0, // second row
   		0.0, 0.0, 1.0  // third row
	);
*/

float3x3 xRotation(float angle){
	float3x3 rotOut = float3x3(
   		1.0, 0.0, 0.0, // first row (not column as in GLSL!)
   		0.0, cos(angle), -sin(angle), // second row
   		0.0, sin(angle), cos(angle)  // third row
	);
	return rotOut;
}
float3x3 yRotation(float angle){
	float3x3 rotOut = float3x3(
   		cos(angle), 0.0, sin(angle), // first row (not column as in GLSL!)
   		0.0, 1.0, 0.0, // second row
   		-sin(angle), 0.0, cos(angle)  // third row
	);
	return rotOut;
}
float3x3 zRotation(float angle){
	float3x3 rotOut = float3x3(
   		cos(angle), -sin(angle), 0.0, // first row (not column as in GLSL!)
   		sin(angle), cos(angle), 0.0, // second row
   		0.0, 0.0, 1.0  // third row
	);
	return rotOut;
}

VertOut VSDefault(VertInOut vert_in)
{
	VertOut vert_out;
	vert_out.pos = mul(float4(vert_in.pos.xyz, 1.0), ViewProj);
	vert_out.uv  = vert_in.uv;
	vert_out.col = color;
	return vert_out;
}

float4 PSDrawBare(VertOut vert_in) : TARGET
{
	float2 uv = vert_in.uv;

	float yaw = (uv.x*2.0-1.0)*PI;
	float pitch = (uv.y*2.0-1.0)*PI/2.0;

	float len = cos(pitch);
	float3 point;

	point.x = cos(yaw)*len;
	point.y = sin(yaw)*len;
	point.z = sin(pitch);

	//APPLY CHANGES

	point = mul(mul(mul(point, yRotation(x)),xRotation(y)), zRotation(z));

	//END OF CHANGES

	pitch = asin(point.z);
	len = cos(pitch);

	yaw = atan(point.y, point.x);

	uv.x = (yaw/PI+1.0)/2.0;
	uv.y = (pitch*2.0/PI+1.0)/2.0;

	float4 E = image.Sample(def_sampler, uv);
	return E;
}

technique Draw
{
	pass
	{
		vertex_shader = VSDefault(vert_in);
		pixel_shader  = PSDrawBare(vert_in);
	}
}
